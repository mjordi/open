name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run Solidity linting
        run: npm run lint:sol

      - name: Run JavaScript linting
        run: npm run lint:js

      - name: Check formatting
        run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.json

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Setup Python for Slither
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Slither
        run: |
          python -m pip install --upgrade pip
          pip install slither-analyzer

      - name: Run Slither analysis
        run: |
          slither contracts/ --json slither-report.json --exclude-dependencies || true

      - name: Upload Slither report
        uses: actions/upload-artifact@v3
        with:
          name: slither-report
          path: slither-report.json

      - name: Run npm audit
        run: npm audit --audit-level moderate

  gas-optimization:
    name: Gas Optimization Report
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Generate gas report
        run: npm run test:gas-report

      - name: Contract size analysis
        run: npm run size

      - name: Upload gas report
        uses: actions/upload-artifact@v3
        with:
          name: gas-report
          path: gas-report.txt

  deploy-testnet:
    name: Deploy to Sepolia Testnet
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Deploy to Sepolia
        run: npm run deploy:sepolia
        env:
          SEPOLIA_URL: ${{ secrets.SEPOLIA_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-sepolia
          path: deployments/sepolia.json

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, security, gas-optimization]
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results

      - name: Download security report
        uses: actions/download-artifact@v3
        with:
          name: slither-report

      - name: Quality gate check
        run: |
          echo "‚úÖ All quality checks passed!"
          echo "üìä Test coverage available in artifacts"
          echo "üîí Security analysis completed"
          echo "‚õΩ Gas optimization report generated"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Notify on success
        if: needs.quality-gate.result == 'success'
        run: echo "üéâ Pipeline completed successfully!"

      - name: Notify on failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "‚ùå Pipeline failed!"
          exit 1 